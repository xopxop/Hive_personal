%start  complete_command
%%
complete_command : list separator
                 | list
                 ;
list             : list separator_op and_or
                 |                   and_or
                 ;
and_or           :                         pipeline
                 | and_or AND_IF linebreak pipeline    //not
                 | and_or OR_IF  linebreak pipeline    //not
                 ;
pipeline         :      pipe_sequence
                 | Bang pipe_sequence    //not
                 ;
pipe_sequence    :                             command
                 | pipe_sequence '|' linebreak command
                 ;
command          : simple_command
                 | compound_command    //not
                 | compound_command redirect_list    //not
                 | function_definition    //not
                 ;
compound_command : brace_group    //not
                 | subshell    //not
                 | for_clause    //not
                 | case_clause    //not
                 | if_clause    //not
                 | while_clause    //not
                 | until_clause    //not
                 ;
subshell         : '(' compound_list ')'
                 ;
compound_list    :              term
                 | newline_list term
                 |              term separator
                 | newline_list term separator
                 ;
term             : term separator and_or
                 |                and_or
                 ;
for_clause       : For name linebreak                            do_group
                 | For name linebreak in          sequential_sep do_group
                 | For name linebreak in wordlist sequential_sep do_group
                 ;
name             : NAME                     /* Apply rule 5 */
                 ;
in               : In                       /* Apply rule 6 */
                 ;
wordlist         : wordlist WORD
                 |          WORD
                 ;
case_clause      : Case WORD linebreak in linebreak case_list    Esac
                 | Case WORD linebreak in linebreak case_list_ns Esac
                 | Case WORD linebreak in linebreak              Esac
                 ;
case_list_ns     : case_list case_item_ns
                 |           case_item_ns
                 ;
case_list        : case_list case_item
                 |           case_item
                 ;
case_item_ns     :     pattern ')'               linebreak
                 |     pattern ')' compound_list linebreak
                 | '(' pattern ')'               linebreak
                 | '(' pattern ')' compound_list linebreak
                 ;
case_item        :     pattern ')' linebreak     DSEMI linebreak
                 |     pattern ')' compound_list DSEMI linebreak
                 | '(' pattern ')' linebreak     DSEMI linebreak
                 | '(' pattern ')' compound_list DSEMI linebreak
                 ;
pattern          :             WORD         /* Apply rule 4 */
                 | pattern '|' WORD         /* Do not apply rule 4 */
                 ;
if_clause        : If compound_list Then compound_list else_part Fi
                 | If compound_list Then compound_list           Fi
                 ;
else_part        : Elif compound_list Then else_part
                 | Else compound_list
                 ;
while_clause     : While compound_list do_group
                 ;
until_clause     : Until compound_list do_group
                 ;
function_definition : fname '(' ')' linebreak function_body
                 ;
function_body    : compound_command                /* Apply rule 9 */
                 | compound_command redirect_list  /* Apply rule 9 */
                 ;
fname            : NAME                            /* Apply rule 8 */
                 ;
brace_group      : Lbrace compound_list Rbrace
                 ;
do_group         : Do compound_list Done           /* Apply rule 6 */
                 ;
simple_command   : cmd_prefix cmd_word cmd_suffix   //not
                 | cmd_prefix cmd_word      //not
                 | cmd_prefix               //not
                 | cmd_name cmd_suffix
                 | cmd_name
                 ;
cmd_name         : WORD                   /* Apply rule 7a */
                 ;
cmd_word         : WORD                   /* Apply rule 7b */
                 ;
cmd_prefix       :            io_redirect               //not
                 | cmd_prefix io_redirect               //not
                 |            ASSIGNMENT_WORD           //not
                 | cmd_prefix ASSIGNMENT_WORD           //not
                 ;
cmd_suffix       :            io_redirect	//doing
                 | cmd_suffix io_redirect   //not yet
                 |            WORD          //done
                 | cmd_suffix WORD          //done
                 ;
redirect_list    :               io_redirect
                 | redirect_list io_redirect
                 ;
io_redirect      :           io_file		//doing
                 | IO_NUMBER io_file		//not yet
                 |           io_here		//not yet
                 | IO_NUMBER io_here		//not yet
                 ;
io_file          : '<'       filename       //done
                 | LESSAND   filename       
                 | '>'       filename       //done
                 | GREATAND  filename
                 | DGREAT    filename       //done
                 | LESSGREAT filename
                 | CLOBBER   filename
                 ;
filename         : WORD                     /* Apply rule 2 */
                 ;
io_here          : DLESS     here_end
                 | DLESSDASH here_end
                 ;
here_end         : WORD                      /* Apply rule 3 */
                 ;
newline_list     :              NEWLINE
                 | newline_list NEWLINE
                 ;
linebreak        : newline_list
                 | /* empty */
                 ;
separator_op     : '&'          //for separator I will use the this
                 | ';'
                 ;
separator        : separator_op linebreak   //
                 | newline_list             //
                 ;
sequential_sep   : ';' linebreak
                 | newline_list
                 ;